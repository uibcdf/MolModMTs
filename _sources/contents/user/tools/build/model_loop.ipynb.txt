{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7a5b75a7-b6af-4554-a840-1da5bf1b6806",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "eef33f08-2391-455d-bcfc-34f6c07a64f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c605d9d33c944be59f264571bb3a89e9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import molsysmt as msm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f72ddf-e62a-457d-a73e-facbbda155bb",
   "metadata": {},
   "source": [
    "# Model loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b60b5ffc-64f8-4d27-a3fc-ce6bc9a7a5ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Warning! The amino acid PRO has no template.\n",
      "No bonds were added by element.group.amino_acid.get_bonded_atom_pairs\n",
      "Warning! The amino acid PRO has no template.\n"
     ]
    }
   ],
   "source": [
    "molecular_system = msm.convert('1az5', to_form='molsysmt.MolSys')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "461aa089-d5e9-40ee-bb6c-54bb5ae44f9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "molecular_system = msm.basic.remove(molecular_system, selection=\"group_type==['water', 'ion', 'cosolute']\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "66b5cb90-970c-496c-9222-cbe8bf90b7f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#msm.info(molecular_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d3d2cf73-bbd9-4765-b182-969d7260ede1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#msm.view(molecular_system)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a1d9f61-b36b-4472-8117-f2a37e7caf07",
   "metadata": {},
   "outputs": [],
   "source": [
    "#msm.convert(molecular_system, to_form='string:amino_acids_1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9184459a-3f19-4719-8eff-673699e00e99",
   "metadata": {},
   "outputs": [],
   "source": [
    "target='PQFHLWKRPVVTAHIEGQPVEVLLDTGADDSIVTGIELGPHYTPKIVGGIGGFINTKEYKNVEVEVLGKRIKGTIMTGDTPINIFGRNLLTALGMSLNF'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "98015abe-35b9-45ec-9e3a-7426f145bcfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.build.model_loop(molecular_system, target_sequence=target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03c06429-f153-436a-b191-eb11bd055f71",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.convert(molecular_system, to_form='string:amino_acids_1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "040ea925-deb4-412c-8629-ccf866656dfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "msm.topology.get_sequence_alignment(molecular_system, reference_molecular_system=target, prettyprint=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8a5a8d5-b450-4718-a540-3ea6dd9362de",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is not done yet. I should implement my own algorithm."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
